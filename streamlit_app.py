import streamlit as st
import pandas as pd
import json

# Configuration de la page
st.set_page_config(page_title="Macro Process ‚Äì Simulateur", layout="wide")

# Titre
st.title("ü™© Macro Process ‚Äì Simulateur de briques")
st.caption("S√©lectionnez, organisez et exportez vos briques d'activit√© et de production")

# Liste des briques extraites du fichier HTML
briques = [
    "Discours Facteur", "Questions du facteur et saisie des r√©ponses", "Saisie d'une information",
    "Prise de photos", "V√©rification d'identit√©", "R√©alisation d'un contr√¥le sans manipulation",
    "R√©alisation d'un contr√¥le avec manipulation", "Prise de mesures et saisie du r√©sultat",
    "Retrait des produits alimentaires non conformes", "Remont√©e d'alerte",
    "Collecte alimentaire (temp√©rature froid positif)", "Collecte alimentaire (temp√©rature ambiante)",
    "Collecte d'objets et mat√©riels", "Collecte d'UM et de contenants", "Collecte comment√©e",
    "Livraison alimentaire (temp√©rature froid positif)", "Livraison alimentaire (temp√©rature ambiante)",
    "Livraison d'objets et mat√©riels", "Livraison d'UM et contenants", "Remise comment√©e",
    "D√©p√¥t alimentaire (froid positif)", "D√©p√¥t de mat√©riel par le client",
    "D√©p√¥t en PIC par le client et acheminement", "Retrait alimentaire (froid positif)",
    "Retrait alimentaire (temp√©rature ambiante)", "Retrait de mat√©riel par le client",
    "Installation de mat√©riel", "D√©sinstallation de mat√©riel", "√âchange (objets, plis‚Ä¶)",
    "Mise sous plis", "Pr√©paration de commande", "Pr√©paration de commande (fresh)",
    "Prise de rdv par l'√©tablissement postal", "Prise de rdv par le facteur en tourn√©e",
    "Entr√©e en stock", "Stockage (flux standards et s√©curis√©s)", "Entreposage et transit (fresh)",
    "Inventaire", "Flashage", "Recueil d'une signature", "Etiquetage",
    "R√©ception flux postal", "R√©ception flux client", "Ventilation des flux", "Exp√©dition",
    "Traitement de la prestation par la PIC Arriv√©e et acheminement", "Consultation de la prestation",
    "Affectation de la prestation", "Pr√©paration de la prestation en Production",
    "Pr√©paration de la prestation Fresh en Production", "Pr√©paration de la prestation en cabine",
    "R√©alisation du d√©part en tourn√©e", "Ouverture de la mission", "Pilotage de la prestation",
    "Appel facteur en mission", "Cl√¥ture de la mission",
    "Traitement de la prestation en Production au retour de tourn√©e",
    "Traitement de la prestation FRESH en Production au retour de tourn√©e",
    "Traitement de la prestation en cabine en retour de tourn√©e", "Nettoyage",
    "Tri pour distribution", "Tri pour dispersion", "Pr√©paration du chantier", "D√©groupage",
    "Cas d'√©chec", "Cas d'√©chec alimentaire"
]

df_briques = pd.DataFrame(briques, columns=["Nom"])
df_briques["Cat√©gorie"] = "Activit√©"

# Initialisation de la session
if "briques_selectionnees" not in st.session_state:
    st.session_state.briques_selectionnees = pd.DataFrame(columns=["Nom", "Cat√©gorie"])

# Interface principale
col1, col2 = st.columns([1, 2])

with col1:
    st.subheader("üìã Briques disponibles")
    selected = st.selectbox("Choisir une brique √† ajouter", df_briques["Nom"])
    if st.button("‚ûï Ajouter la brique"):
        if selected not in st.session_state.briques_selectionnees["Nom"].values:
            brique = df_briques[df_briques["Nom"] == selected].iloc[0]
            st.session_state.briques_selectionnees = pd.concat(
                [st.session_state.briques_selectionnees, pd.DataFrame([brique])], ignore_index=True
            )
            st.success(f"Brique ajout√©e : {selected}")
        else:
            st.warning("Cette brique est d√©j√† ajout√©e.")

    st.subheader("üß± Briques s√©lectionn√©es")
    if st.session_state.briques_selectionnees.empty:
        st.info("Aucune brique s√©lectionn√©e.")
    else:
        for i, row in st.session_state.briques_selectionnees.iterrows():
            with st.expander(f"{row['Nom']}", expanded=True):
                if st.button("‚ùå Supprimer", key=f"suppr_{i}"):
                    st.session_state.briques_selectionnees.drop(i, inplace=True)
                    st.session_state.briques_selectionnees.reset_index(drop=True, inplace=True)
                    st.rerun()

with col2:
    st.subheader("üìä R√©sum√© de la mission")
    if st.session_state.briques_selectionnees.empty:
        st.info("Ajoutez des briques pour afficher le r√©sum√©.")
    else:
        st.dataframe(st.session_state.briques_selectionnees)

        # Export CSV
        csv = st.session_state.briques_selectionnees.to_csv(index=False).encode("utf-8")
        st.download_button("‚¨áÔ∏è T√©l√©charger CSV", csv, file_name="macro_process.csv", mime="text/csv")

        # Export JSON
        json_data = st.session_state.briques_selectionnees.to_dict(orient="records")
        json_str = json.dumps(json_data, indent=2)
        st.download_button("‚¨áÔ∏è T√©l√©charger JSON", json_str, file_name="macro_process.json", mime="application/json")
